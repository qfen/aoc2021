#!/usr/bin/perl
use v5.28;
use warnings;
use POSIX 'floor';
use Data::Dumper;
use constant {
	COST => 0,
	HEURISTIC => 1,
	PATHCOST => 2,
	FROM => 3,
	ADJ => 4,
	ESTIMATE => 5
};

sub parent { floor( ($_[0] - 1) / 2); }

sub insert {
	my ($heap, $val) = @_;
	push @$heap, $val;
	my ($i, $j) = ($#$heap, parent($#$heap));
	if ($i > 1) {
		while ($heap->[$i][ESTIMATE] < $heap->[$j][ESTIMATE]) {
			$heap->@[$i, $j] = $heap->@[$j, $i];
			($i, $j) = ($j, parent($i));
		}
	}
	return $heap->[0][ESTIMATE];
}

sub downheap {
	my ($heap, $i) = @_;
	my ($left, $right, $min) = (2 * $i + 1, 2 * $i + 2, $i);
	if ($left < @$heap and $heap->[$left][ESTIMATE] < $heap->[$i][ESTIMATE]) {
		$min = $left;
	}
	if ($right < @$heap and $heap->[$right][ESTIMATE] < $heap->[$i][ESTIMATE]) {
		$min = $right;
	}
	if ($min != $i) {
		$heap->@[$min, $i] = $heap->@[$i, $min];
		downheap($heap, $min);
	}
}

sub extract {
	my $heap = shift;
	my $ret = shift @$heap;

	if (scalar @$heap) {
		unshift @$heap, pop @$heap;
		downheap($heap, 0);
	}

	return $ret;
}

sub astar {
	my $grid = shift;
	$grid->[0][0][PATHCOST] = 0;
	my $tgt = $grid->[-1][-1];

	my @heap = ($grid->[0][0]);
	my (%open, $current, $neighbor, $tentative);

	while (@heap) {
		$current = extract(\@heap);
		delete $open{ $current };

		for $neighbor ($current->[ADJ]->@*) {
			$tentative = $current->[PATHCOST] + $neighbor->[COST];
			if ($tentative < $neighbor->[PATHCOST]) {
				$neighbor->@[FROM, PATHCOST, ESTIMATE] =
					($current,
					$tentative,
					$tentative + $neighbor->[HEURISTIC]);
				if (! exists $open{ $neighbor }) {
					insert(\@heap, $neighbor);
					$open{ $neighbor } = 1;
				}
			}
		}
	}

	return $tgt->[PATHCOST];
}

sub neighbor_setup {
	my $grid = shift;
	my $right = $#$grid;
	my $bottom = $#{ $grid->[0] };
	for my $row (0 .. $bottom) {
		for my $col (0 .. $right) {
			push $grid->[$row][$col]->@*, ( ($right - $col) + ($bottom - $row), ~0, undef, [], ~0, $row, $col);
			if ($row > 0) {
				push $grid->[$row][$col][ADJ]->@*, $grid->[$row-1][$col];
				push $grid->[$row-1][$col][ADJ]->@*, $grid->[$row][$col];
			}
			if ($col > 0) {
				push $grid->[$row][$col][ADJ]->@*, $grid->[$row][$col-1];
				push $grid->[$row][$col-1][ADJ]->@*, $grid->[$row][$col];
			}
		}
	}
}

my (@part1, @part2, @row, @build);
while (<STDIN>) {
	chomp;
	@row = map { int } split //, $_;
	push @part1, [ map { [ $_ ] } @row ];

	my ($i, $j, $lim) = (0, $#row, 5 * scalar @row);
	while ($j < $lim - 1) {
		push @row, ((($row[$i] + 1) % 10) || 1);
		$i++;
		$j++;
	}
	push @build, [ @row ];
	push @part2, [ map { [ $_ ] } @row ];
}

for my $iter (1 .. 4) {
	for (my $i = 0; $i < @build; $i++) {
		$build[$i]->@* = map { (($_ + 1) % 10) || 1 } $build[$i]->@*;
		push @part2, [ map { [ $_ ] } $build[$i]->@* ];
	}
}

neighbor_setup(\@part1);
say 'part 1: ', astar(\@part1);

neighbor_setup(\@part2);
say 'part 2: ', astar(\@part2);
