#!/usr/bin/perl
use v5.28;
use warnings;
use List::Util 'sum0';

my @list = sort {$a <=> $b} map { int } <STDIN>;

# part 1
push @list, $list[$#list] + 3;
my $jolt = 0;
my @diff;
for (@list) {
	$diff[$_ - $jolt]++;
	$jolt = $_;
}

die '4 or more jolt gap' if $#diff > 3;
say 'part 1: ', $diff[1] * $diff[3];

# part 2
# approach: working back to front, count number of nodes directly reachable
# from current node; score for this node is sum of sub-scores for each of
# those found; final answer is score value at the start node
unshift @list, 0;
my @paths;
my($a, $b, $accum);
$paths[$#list] = 1; # 1 path from to end node ... from end node
for ($a = $#list - 1; $a >= 0; $a--) {
	($accum, $b) = (0, $a + 1);
	$b++ while ($b < $#list and $list[$b + 1] - $list[$a] <= 3);
	$paths[$a] = sum0 @paths[$a + 1 .. $b];
}

say 'part 2: ', $paths[0];
